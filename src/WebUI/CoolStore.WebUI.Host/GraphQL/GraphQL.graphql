type CatalogProductDto {
  category: CategoryDto!
  description: String
  id: Uuid!
  imageUrl: String!
  name: String!
  price: Float!
  store: StoreDto!
}

input CatalogProductDtoFilter {
  AND: [CatalogProductDtoFilter!]
  name: String
  name_contains: String
  OR: [CatalogProductDtoFilter!]
  price: Float
  price_gte: Float
  price_lte: Float
} 

input CatalogProductDtoSort {
  name: SortOperationKind
  price: SortOperationKind
}

type CategoryDto {
  id: Uuid!
  name: String!
}

input CreateProductInput {
  categoryId: Uuid!
  description: String
  eoq: Int!
  imageUrl: String!
  name: String!
  price: Float!
  rop: Int!
  storeId: Uuid!
}

input DeleteProductInput {
  id: Uuid!
}

type inventory_StoreDto {
  calculateSize: Int!
  clone: inventory_StoreDto
  description: String
  id: Uuid!
  location: String
  website: String
}

type Mutation {
  createProduct(createProductInput: CreateProductInput!): CatalogProductDto!
  deleteProduct(deleteProductInput: DeleteProductInput!): Boolean!
  updateProduct(updateProductInput: UpdateProductInput!): CatalogProductDto!
}

type OffsetPagingOfCatalogProductDto {
  # A list of edges.
  edges: [CatalogProductDto]
  totalCount: Int!
}

type Query {
  categories: [CategoryDto!]!
  products(
    order_by: CatalogProductDtoSort
    page: Int
    pageSize: Int
    where: CatalogProductDtoFilter
  ): OffsetPagingOfCatalogProductDto
  stores: [StoreDto!]!
}

enum SortOperationKind {
  ASC
  DESC
}

type StoreDto {
  description: String
  id: Uuid!
  location: String
  website: String
}

input UpdateProductInput {
  categoryId: Uuid!
  description: String
  eoq: Int!
  id: Uuid!
  imageUrl: String!
  name: String!
  price: Float!
  rop: Int!
  storeId: Uuid!
}
